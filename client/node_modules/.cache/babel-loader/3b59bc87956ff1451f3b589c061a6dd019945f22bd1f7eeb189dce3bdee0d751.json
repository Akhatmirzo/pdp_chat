{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\black\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\pdp_chat\\\\client\\\\src\\\\context\\\\ChatRoomContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useReducer, useState } from \"react\";\nimport { getChatRooms } from \"../utils/ChatRoomApi\";\nimport { socketContext } from \"./SocketContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chatRoomContext = /*#__PURE__*/createContext();\nexport default function ChatRoomContext({\n  children\n}) {\n  _s();\n  const [chatRoomLoading, setChatRoomLoading] = useState(\"null\");\n  const [room, setRoom] = useState([]);\n  const {\n    socket\n  } = useContext(socketContext);\n  const [load, setLoad] = useState(false);\n  const [ChatRoom, ChatRoomDispatch] = useReducer(async (state, action) => {\n    let data = null;\n    setChatRoomLoading(true);\n    switch (action.type) {\n      case \"getChatRooms\":\n        data = await getChatRooms();\n        setChatRoomLoading(false);\n        setRoom(data);\n        return data;\n      case \"addChatRoom\":\n        data = [...state, action.payload];\n        setRoom(data);\n        return data;\n      default:\n        return [...state];\n    }\n  }, []);\n  useEffect(() => {\n    if (socket) {\n      socket.on(\"newRoom\", newRoom => {\n        ChatRoomDispatch({\n          type: \"addChatRoom\"\n        });\n      });\n      return () => socket === null || socket === void 0 ? void 0 : socket.off(\"newMessage\");\n    } else setLoad(!load);\n  }, [load, room]);\n  return /*#__PURE__*/_jsxDEV(chatRoomContext.Provider, {\n    value: {\n      room,\n      ChatRoomDispatch,\n      chatRoomLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatRoomContext, \"kVF2kdN7EqEqdyEIwoxnHhnX99c=\");\n_c = ChatRoomContext;\nexport { chatRoomContext };\nvar _c;\n$RefreshReg$(_c, \"ChatRoomContext\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useReducer","useState","getChatRooms","socketContext","jsxDEV","_jsxDEV","chatRoomContext","ChatRoomContext","children","_s","chatRoomLoading","setChatRoomLoading","room","setRoom","socket","load","setLoad","ChatRoom","ChatRoomDispatch","state","action","data","type","payload","on","newRoom","off","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/black/OneDrive/Рабочий стол/pdp_chat/client/src/context/ChatRoomContext.jsx"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useReducer,\r\n  useState,\r\n} from \"react\";\r\nimport { getChatRooms } from \"../utils/ChatRoomApi\";\r\nimport { socketContext } from \"./SocketContext\";\r\n\r\nconst chatRoomContext = createContext();\r\n\r\nexport default function ChatRoomContext({ children }) {\r\n  const [chatRoomLoading, setChatRoomLoading] = useState(\"null\");\r\n  const [room, setRoom] = useState([]);\r\n  const { socket } = useContext(socketContext);\r\n  const [load, setLoad] = useState(false);\r\n  const [ChatRoom, ChatRoomDispatch] = useReducer(async (state, action) => {\r\n    let data = null;\r\n    setChatRoomLoading(true);\r\n    switch (action.type) {\r\n      case \"getChatRooms\":\r\n        data = await getChatRooms();\r\n        setChatRoomLoading(false);\r\n        setRoom(data);\r\n        return data;\r\n\r\n      case \"addChatRoom\":\r\n        data = [...state, action.payload];\r\n        setRoom(data);\r\n        return data;\r\n\r\n      default:\r\n        return [...state];\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on(\"newRoom\", (newRoom) => {\r\n        ChatRoomDispatch({type: \"addChatRoom\",  })\r\n      });\r\n      return () => socket?.off(\"newMessage\");\r\n    } else setLoad(!load);\r\n  }, [load, room]);\r\n\r\n  return (\r\n    <chatRoomContext.Provider\r\n      value={{ room, ChatRoomDispatch, chatRoomLoading }}\r\n    >\r\n      {children}\r\n    </chatRoomContext.Provider>\r\n  );\r\n}\r\n\r\nexport { chatRoomContext };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IACVC,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,UAAU,EACVC,QAAQ,QACH,OAAO;AACd,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,eAAe,gBAAGT,aAAa,CAAC,CAAC;AAEvC,eAAe,SAASU,eAAeA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,MAAM,CAAC;EAC9D,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM;IAAEa;EAAO,CAAC,GAAGhB,UAAU,CAACK,aAAa,CAAC;EAC5C,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAACgB,QAAQ,EAAEC,gBAAgB,CAAC,GAAGlB,UAAU,CAAC,OAAOmB,KAAK,EAAEC,MAAM,KAAK;IACvE,IAAIC,IAAI,GAAG,IAAI;IACfV,kBAAkB,CAAC,IAAI,CAAC;IACxB,QAAQS,MAAM,CAACE,IAAI;MACjB,KAAK,cAAc;QACjBD,IAAI,GAAG,MAAMnB,YAAY,CAAC,CAAC;QAC3BS,kBAAkB,CAAC,KAAK,CAAC;QACzBE,OAAO,CAACQ,IAAI,CAAC;QACb,OAAOA,IAAI;MAEb,KAAK,aAAa;QAChBA,IAAI,GAAG,CAAC,GAAGF,KAAK,EAAEC,MAAM,CAACG,OAAO,CAAC;QACjCV,OAAO,CAACQ,IAAI,CAAC;QACb,OAAOA,IAAI;MAEb;QACE,OAAO,CAAC,GAAGF,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAENpB,SAAS,CAAC,MAAM;IACd,IAAIe,MAAM,EAAE;MACVA,MAAM,CAACU,EAAE,CAAC,SAAS,EAAGC,OAAO,IAAK;QAChCP,gBAAgB,CAAC;UAACI,IAAI,EAAE;QAAgB,CAAC,CAAC;MAC5C,CAAC,CAAC;MACF,OAAO,MAAMR,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEY,GAAG,CAAC,YAAY,CAAC;IACxC,CAAC,MAAMV,OAAO,CAAC,CAACD,IAAI,CAAC;EACvB,CAAC,EAAE,CAACA,IAAI,EAAEH,IAAI,CAAC,CAAC;EAEhB,oBACEP,OAAA,CAACC,eAAe,CAACqB,QAAQ;IACvBC,KAAK,EAAE;MAAEhB,IAAI;MAAEM,gBAAgB;MAAER;IAAgB,CAAE;IAAAF,QAAA,EAElDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B;AAACvB,EAAA,CAzCuBF,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AA2CvC,SAASD,eAAe;AAAG,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}