{"ast":null,"code":"const API_URL = \"http://localhost:8000/api/room/\";\nasync function SendMessage(data, id) {\n  try {\n    const response = await fetch(`${API_URL}send/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        message: data\n      })\n    });\n    if (response.status !== 200) {\n      console.log(response);\n      throw new Error(\"Message not sent\");\n    }\n    const res = await response.json();\n    return res;\n  } catch (error) {\n    console.log(error);\n  }\n}\n_c = SendMessage;\nasync function EditMessage(data, id) {\n  try {\n    const response = await fetch(`${API_URL}messages/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        message: data\n      })\n    });\n    if (response.status !== 200) {\n      console.log(response);\n      throw new Error(\"Message edit failed\");\n    }\n    const res = await response.json();\n    return res;\n  } catch (error) {\n    console.log(error);\n  }\n}\n_c2 = EditMessage;\nasync function DeleteMessage(id) {\n  try {\n    const response = await fetch(`${API_URL}messages/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: localStorage.getItem(\"token\")\n      }\n    });\n    if (response.status !== 200) {\n      console.log(response);\n      throw new Error(\"Message not deleted\");\n    }\n    const res = await response.json();\n    return res;\n  } catch (error) {\n    console.log(error);\n  }\n}\n_c3 = DeleteMessage;\nasync function GetChatRooms() {\n  try {\n    const response = await fetch(`${API_URL}chatrooms`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: localStorage.getItem(\"token\")\n      }\n    });\n    if (response.status !== 200) {\n      console.log(response);\n      throw new Error(\"Chat not found\");\n    }\n    const res = await response.json();\n    return res;\n  } catch (error) {\n    console.log(error);\n    return {\n      ...error\n    };\n  }\n}\n_c4 = GetChatRooms;\nexport { GetChatRooms, SendMessage, EditMessage };\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"SendMessage\");\n$RefreshReg$(_c2, \"EditMessage\");\n$RefreshReg$(_c3, \"DeleteMessage\");\n$RefreshReg$(_c4, \"GetChatRooms\");","map":{"version":3,"names":["API_URL","SendMessage","data","id","response","fetch","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","message","status","console","log","Error","res","json","error","_c","EditMessage","_c2","DeleteMessage","_c3","GetChatRooms","_c4","$RefreshReg$"],"sources":["C:/Users/Akhatmirzo/Desktop/github/pdp_chat/client/src/utils/ChatApi.js"],"sourcesContent":["const API_URL = \"http://localhost:8000/api/room/\";\r\n\r\nasync function SendMessage(data, id) {\r\n  try {\r\n    const response = await fetch(`${API_URL}send/${id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify({ message: data }),\r\n    });\r\n\r\n    if (response.status !== 200) {\r\n      console.log(response);\r\n      throw new Error(\"Message not sent\");\r\n    }\r\n\r\n    const res = await response.json();\r\n\r\n    return res;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nasync function EditMessage(data, id) {\r\n  try {\r\n    const response = await fetch(`${API_URL}messages/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify({ message: data }),\r\n    });\r\n\r\n    if (response.status !== 200) {\r\n      console.log(response);\r\n      throw new Error(\"Message edit failed\");\r\n    }\r\n\r\n    const res = await response.json();\r\n\r\n    return res;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nasync function DeleteMessage(id) {\r\n  try {\r\n    const response = await fetch(`${API_URL}messages/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: localStorage.getItem(\"token\"),\r\n      },\r\n    });\r\n    if (response.status!== 200) {\r\n      console.log(response);\r\n      throw new Error(\"Message not deleted\");\r\n    }\r\n    const res = await response.json();\r\n    return res;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nasync function GetChatRooms() {\r\n  try {\r\n    const response = await fetch(`${API_URL}chatrooms`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: localStorage.getItem(\"token\"),\r\n      },\r\n    });\r\n\r\n    if (response.status !== 200) {\r\n      console.log(response);\r\n      throw new Error(\"Chat not found\");\r\n    }\r\n\r\n    const res = await response.json();\r\n\r\n    return res;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return {\r\n      ...error,\r\n    };\r\n  }\r\n}\r\n\r\nexport { GetChatRooms, SendMessage, EditMessage };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}