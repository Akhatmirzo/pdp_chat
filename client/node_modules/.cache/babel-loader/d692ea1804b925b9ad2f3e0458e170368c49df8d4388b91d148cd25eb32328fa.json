{"ast":null,"code":"function convertToBase64(file) {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.readAsDataURL(file);\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = error => {\n      reject(error);\n    };\n  });\n}\nfunction calcTime(date) {\n  const time = date.split(\"T\")[1].split(\".\");\n  return time[0];\n}\nfunction checkEmptySpace(string) {\n  let newStr = \"\";\n  let letterPosStart = null;\n  let letterPosEnd = null;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] !== \" \") {\n      letterPosStart = i;\n      break;\n    }\n  }\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] !== \" \") {\n      letterPosEnd = i;\n      break;\n    }\n  }\n  newStr = string.slice(letterPosStart, letterPosEnd);\n  return newStr;\n}\nconsole.log(checkEmptySpace(\"           salom qanday              \"));\nexport { convertToBase64, calcTime, checkEmptySpace };","map":{"version":3,"names":["convertToBase64","file","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","onload","result","onerror","error","calcTime","date","time","split","checkEmptySpace","string","newStr","letterPosStart","letterPosEnd","i","length","slice","console","log"],"sources":["C:/Users/Akhatmirzo/Desktop/github/pdp_chat/client/src/utils/helper.js"],"sourcesContent":["function convertToBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsDataURL(file);\r\n    fileReader.onload = () => {\r\n      resolve(fileReader.result);\r\n    };\r\n    fileReader.onerror = (error) => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nfunction calcTime(date) {\r\n  const time = date.split(\"T\")[1].split(\".\");\r\n\r\n  return time[0];\r\n}\r\n\r\nfunction checkEmptySpace(string) {\r\n  let newStr = \"\";\r\n  let letterPosStart = null;\r\n  let letterPosEnd = null;\r\n  \r\n  for (let i = 0; i < string.length; i++) {\r\n    if (string[i] !== \" \") {\r\n        letterPosStart = i;\r\n      break;\r\n    }\r\n  }\r\n  \r\n  for (let i = string.length - 1; i >= 0; i--) {\r\n    if (string[i] !== \" \") {\r\n        letterPosEnd = i;\r\n      break;\r\n    }\r\n  }\r\n  \r\n  newStr = string.slice(letterPosStart, letterPosEnd);\r\n  return newStr;\r\n}\r\n\r\nconsole.log(checkEmptySpace(\"           salom qanday              \"))\r\n\r\nexport { convertToBase64, calcTime, checkEmptySpace };\r\n"],"mappings":"AAAA,SAASA,eAAeA,CAACC,IAAI,EAAE;EAC7B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAAC,CAAC;IACnCD,UAAU,CAACE,aAAa,CAACN,IAAI,CAAC;IAC9BI,UAAU,CAACG,MAAM,GAAG,MAAM;MACxBL,OAAO,CAACE,UAAU,CAACI,MAAM,CAAC;IAC5B,CAAC;IACDJ,UAAU,CAACK,OAAO,GAAIC,KAAK,IAAK;MAC9BP,MAAM,CAACO,KAAK,CAAC;IACf,CAAC;EACH,CAAC,CAAC;AACJ;AAEA,SAASC,QAAQA,CAACC,IAAI,EAAE;EACtB,MAAMC,IAAI,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC;EAE1C,OAAOD,IAAI,CAAC,CAAC,CAAC;AAChB;AAEA,SAASE,eAAeA,CAACC,MAAM,EAAE;EAC/B,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,cAAc,GAAG,IAAI;EACzB,IAAIC,YAAY,GAAG,IAAI;EAEvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAIJ,MAAM,CAACI,CAAC,CAAC,KAAK,GAAG,EAAE;MACnBF,cAAc,GAAGE,CAAC;MACpB;IACF;EACF;EAEA,KAAK,IAAIA,CAAC,GAAGJ,MAAM,CAACK,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3C,IAAIJ,MAAM,CAACI,CAAC,CAAC,KAAK,GAAG,EAAE;MACnBD,YAAY,GAAGC,CAAC;MAClB;IACF;EACF;EAEAH,MAAM,GAAGD,MAAM,CAACM,KAAK,CAACJ,cAAc,EAAEC,YAAY,CAAC;EACnD,OAAOF,MAAM;AACf;AAEAM,OAAO,CAACC,GAAG,CAACT,eAAe,CAAC,uCAAuC,CAAC,CAAC;AAErE,SAAShB,eAAe,EAAEY,QAAQ,EAAEI,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}