{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { tokenContext } from \"../context/TokenContext\";\nconst useGetChatRooms = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [chatRoom, setChatRoom] = useState([]);\n  const {\n    token\n  } = useContext(tokenContext);\n  const getChatRooms = async () => {\n    if (!token) {\n      console.log(\"Token not found\");\n      return;\n    }\n    try {\n      const response = await axios(\"http://localhost:8000/api/room/chatrooms\", {\n        headers: {\n          authorization: token\n        }\n      });\n      if (response.status !== 200) {\n        console.log(response);\n        throw new Error(\"ChatRoom not found\");\n      }\n      setChatRoom(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getChatRooms();\n  }, []);\n  return {\n    chatRoom\n  };\n};\n_s(useGetChatRooms, \"cKLw/7t0JqiKXsNeXR266h2A0qU=\");\nexport default useGetChatRooms;","map":{"version":3,"names":["useContext","useEffect","useState","axios","tokenContext","useGetChatRooms","_s","loading","setLoading","chatRoom","setChatRoom","token","getChatRooms","console","log","response","headers","authorization","status","Error","data","error"],"sources":["C:/Users/black/OneDrive/Рабочий стол/pdp_chat/client/src/hooks/useGetChatRooms.jsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { tokenContext } from \"../context/TokenContext\";\r\n\r\nconst useGetChatRooms = () => {\r\n    const [loading, setLoading] = useState(false);\r\n  const [chatRoom, setChatRoom] = useState([]);\r\n  const { token } = useContext(tokenContext);\r\n\r\n  const getChatRooms = async () => {\r\n\r\n    if (!token) {\r\n        console.log(\"Token not found\");\r\n        return ;\r\n    }\r\n\r\n    try {\r\n      const response = await axios(\"http://localhost:8000/api/room/chatrooms\", {\r\n        headers: {\r\n          authorization: token,\r\n        },\r\n      });\r\n\r\n      if (response.status !== 200) {\r\n        console.log(response);\r\n        throw new Error(\"ChatRoom not found\");\r\n      }\r\n\r\n      setChatRoom(response.data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getChatRooms();\r\n  }, [])\r\n\r\n  return { chatRoom }\r\n};\r\n\r\nexport default useGetChatRooms;\r\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,yBAAyB;AAEtD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM;IAAES;EAAM,CAAC,GAAGX,UAAU,CAACI,YAAY,CAAC;EAE1C,MAAMQ,YAAY,GAAG,MAAAA,CAAA,KAAY;IAE/B,IAAI,CAACD,KAAK,EAAE;MACRE,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B;IACJ;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAAC,0CAA0C,EAAE;QACvEa,OAAO,EAAE;UACPC,aAAa,EAAEN;QACjB;MACF,CAAC,CAAC;MAEF,IAAII,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QAC3BL,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;QACrB,MAAM,IAAII,KAAK,CAAC,oBAAoB,CAAC;MACvC;MAEAT,WAAW,CAACK,QAAQ,CAACK,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;IACpB;EACF,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACdW,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEH;EAAS,CAAC;AACrB,CAAC;AAACH,EAAA,CAnCID,eAAe;AAqCrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}